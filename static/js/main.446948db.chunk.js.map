{"version":3,"sources":["components/toast/toaster.js","components/notifications.js","App.js","serviceWorker.js","index.js"],"names":["Toast","prop","toastClass","type","toLowerCase","positionClass","position","className","text","showToast","timeout","target","document","getElementById","setTimeout","ReactDOM","unmountComponentAtNode","hide","render","Notifications","id","App","style","onClick","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAiBeA,MAdf,SAAeC,GACb,IAAIC,EACFD,EAAKE,MAAoC,YAA5BF,EAAKE,KAAKC,cACnB,aACA,WACFC,EACFJ,EAAKK,SAAWL,EAAKK,SAASF,cAAe,YAC/C,OACE,yBAAKG,UAAWL,EAAa,IAAMG,GAChCJ,EAAKO,KADR,IACc,0BAAMD,UAAU,+BAAhB,Q,MCNlB,SAASE,EAAUD,EAAML,EAAMO,EAASJ,GACtC,IAAIK,EAASC,SAASC,eAAe,wBACrCC,YAAW,YASb,WACI,IAAIH,EAASC,SAASC,eAAe,wBACrCE,IAASC,uBAAuBL,GAVhCM,KACCP,GAAmB,MACtBK,IAASG,OACP,kBAAC,EAAD,CAAOV,KAAMA,EAAME,QAASA,EAASP,KAAMA,EAAMG,SAAUA,IAC3DK,GAQJ,IAQeQ,EARO,WACpB,OACE,yBAAKC,GAAG,uBAAuBb,UAAU,U,MCP9Bc,MAZf,WAIE,OACE,yBAAKd,UAAU,OAAM,6BAAK,yBAAKe,MAAO,CAAC,OAAU,WAAYC,QAAS,WAHtEd,EAAU,+BAAgC,SAAU,IAAM,iBAGhC,+BAAmG,6BAAxG,+0JAEf,kBAAC,EAAD,QCCUe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNb,IAASG,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.446948db.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./toaster.css\";\n\nfunction Toast(prop) {\n  let toastClass =\n    prop.type && prop.type.toLowerCase() === \"success\"\n      ? \"greenColor\"\n      : \"redColor\";\n  let positionClass =\n    prop.position ? prop.position.toLowerCase(): 'topcorner';\n  return (\n    <div className={toastClass + ' ' + positionClass}>\n      {prop.text} <span className=\"paddingLeft10 cursorPointer\"> x</span>\n    </div>\n  );\n}\n\nexport default Toast;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Toast from './toast/toaster';\nimport './notify/notify.css';\n\n/* Render React component */\nfunction showToast(text, type, timeout, position) {\n  let target = document.getElementById(\"notification-wrapper\");\n  setTimeout(()=>{\n    hide();\n  }, timeout ? timeout: 2500);\n  ReactDOM.render(\n    <Toast text={text} timeout={timeout} type={type} position={position} />,\n    target\n  );\n}\n/* Unmount React component */\nfunction hide() {\n    let target = document.getElementById(\"notification-wrapper\");\n    ReactDOM.unmountComponentAtNode(target);\n}\nconst Notifications = () => {\n  return (\n    <div id=\"notification-wrapper\" className=\"card\">\n    </div>\n  );\n};\n\nexport {showToast};\nexport default Notifications;","import React from 'react';\nimport Notifications, {showToast} from './components/notifications';\nimport './App.css';\n\nfunction App() {\n  let triggerToaster = () => {\n    showToast('User Info Saved Successfully', 'Failed', 9000, 'bottomright');\n  }\n  return (\n    <div className=\"App\"><div><div style={{'cursor': 'pointer'}} onClick={()=>triggerToaster()}>Click Me for Notification! </div><br />\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Eius labore ea corporis aperiam earum, nihil rem nesciunt, quisquam molestias facilis architecto explicabo unde numquam in mollitia necessitatibus quidem soluta porro rerum nulla impedit sed asperiores inventore voluptate? Quaerat repellendus at consectetur, voluptas culpa inventore alias facere! In laborum quia adipisci minima. Ex possimus consectetur facilis reiciendis facere, ipsa impedit natus porro eos in quas tempore deleniti at illo nisi cumque sint velit excepturi, reprehenderit molestiae ipsum corrupti quisquam id? Id eligendi consequuntur pariatur necessitatibus, quasi nostrum voluptatibus voluptas, tempore, sequi dolore iure officia libero et maxime quibusdam perspiciatis vel laboriosam quos labore ad minima similique? Autem sunt maiores ad molestias corporis deleniti quos, nesciunt voluptates dicta iste recusandae explicabo aperiam neque delectus provident perspiciatis ipsam repellat unde? Maiores labore neque hic libero esse facere eligendi soluta animi rem reiciendis mollitia consequuntur provident accusamus repudiandae enim optio aspernatur eum adipisci, at beatae a cupiditate ipsa culpa quasi! Odio, veritatis praesentium doloremque numquam expedita quae dolorum, ex exercitationem aspernatur, dolor vel amet dolores minima! Delectus reiciendis reprehenderit dolores, labore minus atque, sed asperiores nisi dignissimos error aliquid harum officiis alias accusamus dolore eos ipsum iusto iste tempora repellendus minima rerum exercitationem animi repellat! Eveniet non, asperiores aut quo impedit id excepturi mollitia in dicta placeat, laboriosam minima ea ipsa quae soluta obcaecati doloremque libero saepe quasi adipisci. Ipsa minima esse, dolore in odit modi fugiat dolor cumque perferendis corporis. Temporibus enim consequatur reprehenderit, repudiandae aut aperiam, eos ipsa eveniet blanditiis ipsum laboriosam, fugiat cupiditate odit fugit? Laborum, totam iure eum, consequatur quaerat hic odio, porro iusto accusantium sint veritatis ullam molestiae. Sequi qui quam reprehenderit, nisi similique tenetur iusto voluptatem soluta, molestias obcaecati possimus veniam dolorem rem amet numquam quisquam, accusamus labore alias provident hic nemo perferendis? Quam saepe tempora eaque natus? Minima vitae earum molestiae voluptatem! Blanditiis, optio ipsam? Similique quam eum rerum non autem quasi tempora voluptatem eligendi cupiditate ipsa magni dolore nesciunt culpa quae quis velit incidunt voluptates tenetur, ad hic eos ducimus magnam pariatur facilis. Impedit veniam numquam illum necessitatibus ad deserunt tempora blanditiis delectus magnam non similique error reiciendis dolorum neque at ratione optio temporibus nostrum ullam quam, dignissimos libero molestias soluta placeat! Voluptatibus vel deserunt modi excepturi, quibusdam expedita quis corrupti quam consequatur illo laudantium pariatur eveniet molestias ad beatae et doloribus natus at? Explicabo laborum sint, optio sapiente odio praesentium in veritatis sequi totam repellat iusto mollitia rem. Nemo consectetur delectus blanditiis enim nihil? Tenetur unde placeat assumenda cum id atque repellat culpa consequuntur voluptatibus. Esse accusantium omnis eos, magni doloremque molestias voluptatem deserunt accusamus atque voluptatum temporibus sapiente id sequi velit distinctio porro soluta qui ipsum aliquam non? Ea, earum. Sapiente quibusdam porro iure eos magnam fugit quis sunt et tempore possimus quidem earum sint vel, nisi nulla consectetur eligendi ratione corporis omnis eaque repellendus. Rerum labore sequi hic rem non corporis omnis consectetur nemo. Hic, quisquam. Cupiditate architecto ipsam tenetur eum vero dolore rem pariatur quis soluta rerum. Vel dolores molestiae itaque reprehenderit tempore vitae error. Cumque adipisci culpa quibusdam est. Eaque aperiam voluptates saepe obcaecati, debitis, modi tenetur impedit sed quo labore possimus ea tempora, dicta soluta voluptate. Ducimus officia quasi nostrum numquam vero, ipsa, fugit architecto saepe ipsum ea quo illum beatae voluptatibus odio ad ullam harum assumenda animi minima error asperiores molestias! Laboriosam deserunt ratione fugiat voluptate quisquam natus, iusto exercitationem alias veritatis soluta asperiores delectus magni distinctio praesentium, cupiditate tempore nobis assumenda harum debitis temporibus dolor pariatur laudantium dolorum illo. Quis itaque, qui quos nostrum temporibus repellat expedita nemo dolorem porro enim molestiae distinctio illo quasi placeat in laborum aliquid inventore possimus autem commodi nihil molestias, dolor doloremque! Nulla repellat eveniet facilis aperiam? Distinctio molestiae aut nihil ipsam, ipsa dolore dolor debitis, architecto eum qui reiciendis, cum necessitatibus ut labore consequuntur atque dolorum culpa. Iste cupiditate fuga, laboriosam aliquam veniam quasi voluptates voluptate fugiat! Soluta blanditiis consectetur doloremque labore?\n    </div><Notifications></Notifications>\n     </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}